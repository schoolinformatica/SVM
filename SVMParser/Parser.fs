// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

  open SVMAST
  open System
  open ParserUtils

  let makeReg reg =
    Literal.Register(fst reg,snd reg)
    

# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | NEWLINE
  | LSQBRACKET
  | RSQBRACKET
  | LABELDEF
  | COLON
  | END
  | ID of (string * (int * int))
  | JEQ of (int * int)
  | JC of (int * int)
  | JMP of (int * int)
  | CMP of (int * int)
  | DIV of (int * int)
  | MUL of (int * int)
  | SUB of (int * int)
  | ADD of (int * int)
  | MOD of (int * int)
  | NOT of (int * int)
  | OR of (int * int)
  | AND of (int * int)
  | MOV of (int * int)
  | NOP of (int * int)
  | REG4 of (int * int)
  | REG3 of (int * int)
  | REG2 of (int * int)
  | REG1 of (int * int)
  | STRING of (string * (int * int))
  | FLOAT of (float * (int * int))
  | INT of (int * (int * int))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_NEWLINE
    | TOKEN_LSQBRACKET
    | TOKEN_RSQBRACKET
    | TOKEN_LABELDEF
    | TOKEN_COLON
    | TOKEN_END
    | TOKEN_ID
    | TOKEN_JEQ
    | TOKEN_JC
    | TOKEN_JMP
    | TOKEN_CMP
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_SUB
    | TOKEN_ADD
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_MOV
    | TOKEN_NOP
    | TOKEN_REG4
    | TOKEN_REG3
    | TOKEN_REG2
    | TOKEN_REG1
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_newlineSeq
    | NONTERM_program
    | NONTERM_register
    | NONTERM_literal
    | NONTERM_address
    | NONTERM_adressOrReg
    | NONTERM_anyBinaryOpErr
    | NONTERM_anyOpErr
    | NONTERM_instruction
    | NONTERM_newlineOpt
    | NONTERM_instructionSeq

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | NEWLINE  -> 1 
  | LSQBRACKET  -> 2 
  | RSQBRACKET  -> 3 
  | LABELDEF  -> 4 
  | COLON  -> 5 
  | END  -> 6 
  | ID _ -> 7 
  | JEQ _ -> 8 
  | JC _ -> 9 
  | JMP _ -> 10 
  | CMP _ -> 11 
  | DIV _ -> 12 
  | MUL _ -> 13 
  | SUB _ -> 14 
  | ADD _ -> 15 
  | MOD _ -> 16 
  | NOT _ -> 17 
  | OR _ -> 18 
  | AND _ -> 19 
  | MOV _ -> 20 
  | NOP _ -> 21 
  | REG4 _ -> 22 
  | REG3 _ -> 23 
  | REG2 _ -> 24 
  | REG1 _ -> 25 
  | STRING _ -> 26 
  | FLOAT _ -> 27 
  | INT _ -> 28 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_NEWLINE 
  | 2 -> TOKEN_LSQBRACKET 
  | 3 -> TOKEN_RSQBRACKET 
  | 4 -> TOKEN_LABELDEF 
  | 5 -> TOKEN_COLON 
  | 6 -> TOKEN_END 
  | 7 -> TOKEN_ID 
  | 8 -> TOKEN_JEQ 
  | 9 -> TOKEN_JC 
  | 10 -> TOKEN_JMP 
  | 11 -> TOKEN_CMP 
  | 12 -> TOKEN_DIV 
  | 13 -> TOKEN_MUL 
  | 14 -> TOKEN_SUB 
  | 15 -> TOKEN_ADD 
  | 16 -> TOKEN_MOD 
  | 17 -> TOKEN_NOT 
  | 18 -> TOKEN_OR 
  | 19 -> TOKEN_AND 
  | 20 -> TOKEN_MOV 
  | 21 -> TOKEN_NOP 
  | 22 -> TOKEN_REG4 
  | 23 -> TOKEN_REG3 
  | 24 -> TOKEN_REG2 
  | 25 -> TOKEN_REG1 
  | 26 -> TOKEN_STRING 
  | 27 -> TOKEN_FLOAT 
  | 28 -> TOKEN_INT 
  | 31 -> TOKEN_end_of_input
  | 29 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_newlineSeq 
    | 3 -> NONTERM_newlineSeq 
    | 4 -> NONTERM_program 
    | 5 -> NONTERM_register 
    | 6 -> NONTERM_register 
    | 7 -> NONTERM_register 
    | 8 -> NONTERM_register 
    | 9 -> NONTERM_literal 
    | 10 -> NONTERM_literal 
    | 11 -> NONTERM_literal 
    | 12 -> NONTERM_literal 
    | 13 -> NONTERM_literal 
    | 14 -> NONTERM_address 
    | 15 -> NONTERM_address 
    | 16 -> NONTERM_adressOrReg 
    | 17 -> NONTERM_adressOrReg 
    | 18 -> NONTERM_anyBinaryOpErr 
    | 19 -> NONTERM_anyBinaryOpErr 
    | 20 -> NONTERM_anyBinaryOpErr 
    | 21 -> NONTERM_anyBinaryOpErr 
    | 22 -> NONTERM_anyBinaryOpErr 
    | 23 -> NONTERM_anyBinaryOpErr 
    | 24 -> NONTERM_anyBinaryOpErr 
    | 25 -> NONTERM_anyOpErr 
    | 26 -> NONTERM_anyOpErr 
    | 27 -> NONTERM_instruction 
    | 28 -> NONTERM_instruction 
    | 29 -> NONTERM_instruction 
    | 30 -> NONTERM_instruction 
    | 31 -> NONTERM_instruction 
    | 32 -> NONTERM_instruction 
    | 33 -> NONTERM_instruction 
    | 34 -> NONTERM_instruction 
    | 35 -> NONTERM_instruction 
    | 36 -> NONTERM_instruction 
    | 37 -> NONTERM_instruction 
    | 38 -> NONTERM_instruction 
    | 39 -> NONTERM_instruction 
    | 40 -> NONTERM_instruction 
    | 41 -> NONTERM_instruction 
    | 42 -> NONTERM_instruction 
    | 43 -> NONTERM_instruction 
    | 44 -> NONTERM_instruction 
    | 45 -> NONTERM_instruction 
    | 46 -> NONTERM_instruction 
    | 47 -> NONTERM_instruction 
    | 48 -> NONTERM_instruction 
    | 49 -> NONTERM_instruction 
    | 50 -> NONTERM_instruction 
    | 51 -> NONTERM_instruction 
    | 52 -> NONTERM_instruction 
    | 53 -> NONTERM_instruction 
    | 54 -> NONTERM_instruction 
    | 55 -> NONTERM_instruction 
    | 56 -> NONTERM_instruction 
    | 57 -> NONTERM_instruction 
    | 58 -> NONTERM_instruction 
    | 59 -> NONTERM_newlineOpt 
    | 60 -> NONTERM_newlineOpt 
    | 61 -> NONTERM_instructionSeq 
    | 62 -> NONTERM_instructionSeq 
    | 63 -> NONTERM_instructionSeq 
    | 64 -> NONTERM_instructionSeq 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 31 
let _fsyacc_tagOfErrorTerminal = 29

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | NEWLINE  -> "NEWLINE" 
  | LSQBRACKET  -> "LSQBRACKET" 
  | RSQBRACKET  -> "RSQBRACKET" 
  | LABELDEF  -> "LABELDEF" 
  | COLON  -> "COLON" 
  | END  -> "END" 
  | ID _ -> "ID" 
  | JEQ _ -> "JEQ" 
  | JC _ -> "JC" 
  | JMP _ -> "JMP" 
  | CMP _ -> "CMP" 
  | DIV _ -> "DIV" 
  | MUL _ -> "MUL" 
  | SUB _ -> "SUB" 
  | ADD _ -> "ADD" 
  | MOD _ -> "MOD" 
  | NOT _ -> "NOT" 
  | OR _ -> "OR" 
  | AND _ -> "AND" 
  | MOV _ -> "MOV" 
  | NOP _ -> "NOP" 
  | REG4 _ -> "REG4" 
  | REG3 _ -> "REG3" 
  | REG2 _ -> "REG2" 
  | REG1 _ -> "REG1" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | LSQBRACKET  -> (null : System.Object) 
  | RSQBRACKET  -> (null : System.Object) 
  | LABELDEF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | JEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | JC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | JMP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CMP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MUL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUB _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MOD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MOV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REG4 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REG3 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REG2 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REG1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 85us; 4us; 5us; 86us; 87us; 1us; 65535us; 0us; 2us; 25us; 65535us; 17us; 20us; 24us; 35us; 25us; 37us; 26us; 41us; 27us; 43us; 28us; 45us; 29us; 47us; 30us; 49us; 32us; 23us; 33us; 15us; 35us; 15us; 37us; 15us; 39us; 40us; 41us; 15us; 43us; 15us; 45us; 15us; 47us; 15us; 49us; 15us; 51us; 52us; 52us; 15us; 57us; 58us; 60us; 61us; 64us; 15us; 68us; 15us; 80us; 81us; 11us; 65535us; 33us; 34us; 35us; 36us; 37us; 38us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 52us; 53us; 64us; 65us; 68us; 69us; 12us; 65535us; 32us; 22us; 33us; 16us; 35us; 16us; 37us; 16us; 41us; 16us; 43us; 16us; 45us; 16us; 47us; 16us; 49us; 16us; 52us; 16us; 64us; 16us; 68us; 16us; 1us; 65535us; 32us; 33us; 3us; 65535us; 6us; 67us; 86us; 67us; 87us; 67us; 0us; 65535us; 3us; 65535us; 6us; 86us; 86us; 86us; 87us; 86us; 1us; 65535us; 0us; 6us; 3us; 65535us; 6us; 7us; 86us; 89us; 87us; 88us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 9us; 35us; 47us; 60us; 62us; 66us; 67us; 71us; 73us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 2us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 3us; 18us; 29us; 45us; 3us; 19us; 30us; 46us; 3us; 20us; 32us; 48us; 3us; 21us; 33us; 49us; 3us; 22us; 34us; 50us; 3us; 23us; 35us; 51us; 3us; 24us; 36us; 52us; 1us; 27us; 3us; 28us; 42us; 43us; 2us; 28us; 43us; 1us; 28us; 2us; 29us; 45us; 1us; 29us; 2us; 30us; 46us; 1us; 30us; 2us; 31us; 47us; 1us; 31us; 2us; 32us; 48us; 1us; 32us; 2us; 33us; 49us; 1us; 33us; 2us; 34us; 50us; 1us; 34us; 2us; 35us; 51us; 1us; 35us; 2us; 36us; 52us; 1us; 36us; 2us; 37us; 53us; 2us; 37us; 53us; 1us; 37us; 2us; 38us; 54us; 1us; 38us; 3us; 39us; 55us; 56us; 2us; 39us; 56us; 1us; 39us; 2us; 40us; 57us; 2us; 40us; 57us; 1us; 40us; 2us; 41us; 58us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 3us; 61us; 62us; 63us; 1us; 61us; 1us; 61us; 1us; 63us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 54us; 58us; 62us; 66us; 70us; 74us; 78us; 80us; 84us; 87us; 89us; 92us; 94us; 97us; 99us; 102us; 104us; 107us; 109us; 112us; 114us; 117us; 119us; 122us; 124us; 127us; 129us; 132us; 135us; 137us; 140us; 142us; 146us; 149us; 151us; 154us; 157us; 159us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 212us; 214us; 216us; |]
let _fsyacc_action_rows = 90
let _fsyacc_actionTableElements = [|1us; 16444us; 1us; 4us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 1us; 16387us; 1us; 4us; 0us; 16386us; 15us; 16448us; 4us; 62us; 8us; 59us; 9us; 56us; 10us; 54us; 11us; 51us; 12us; 30us; 13us; 29us; 14us; 28us; 15us; 27us; 16us; 26us; 17us; 39us; 18us; 25us; 19us; 24us; 20us; 32us; 21us; 31us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 5us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 28us; 18us; 1us; 32768us; 3us; 19us; 0us; 16398us; 1us; 32768us; 3us; 21us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 4us; 16402us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16403us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16404us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16405us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16406us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16407us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 4us; 16408us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 0us; 16411us; 6us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 29us; 64us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 66us; 0us; 16412us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 70us; 0us; 16413us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 71us; 0us; 16414us; 5us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 29us; 72us; 0us; 16415us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 73us; 0us; 16416us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 74us; 0us; 16417us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 75us; 0us; 16418us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 76us; 0us; 16419us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 77us; 0us; 16420us; 4us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 9us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 29us; 78us; 0us; 16421us; 2us; 32768us; 7us; 55us; 29us; 79us; 0us; 16422us; 2us; 32768us; 7us; 57us; 29us; 80us; 5us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 29us; 82us; 0us; 16423us; 1us; 32768us; 7us; 60us; 5us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 29us; 83us; 0us; 16424us; 2us; 32768us; 7us; 63us; 29us; 84us; 0us; 16425us; 8us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 0us; 16426us; 0us; 16427us; 1us; 32768us; 29us; 68us; 8us; 32768us; 2us; 17us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 26us; 14us; 27us; 13us; 28us; 12us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 4us; 32768us; 22us; 11us; 23us; 10us; 24us; 9us; 25us; 8us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 16us; 16446us; 1us; 4us; 4us; 62us; 8us; 59us; 9us; 56us; 10us; 54us; 11us; 51us; 12us; 30us; 13us; 29us; 14us; 28us; 15us; 27us; 16us; 26us; 17us; 39us; 18us; 25us; 19us; 24us; 20us; 32us; 21us; 31us; 15us; 16448us; 4us; 62us; 8us; 59us; 9us; 56us; 10us; 54us; 11us; 51us; 12us; 30us; 13us; 29us; 14us; 28us; 15us; 27us; 16us; 26us; 17us; 39us; 18us; 25us; 19us; 24us; 20us; 32us; 21us; 31us; 0us; 16445us; 0us; 16447us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 41us; 43us; 44us; 46us; 47us; 48us; 49us; 54us; 59us; 64us; 69us; 74us; 79us; 84us; 85us; 92us; 102us; 103us; 113us; 114us; 124us; 125us; 131us; 132us; 142us; 143us; 153us; 154us; 164us; 165us; 175us; 176us; 186us; 187us; 192us; 202us; 203us; 206us; 207us; 210us; 216us; 217us; 219us; 225us; 226us; 229us; 230us; 239us; 240us; 241us; 243us; 252us; 253us; 254us; 255us; 256us; 257us; 258us; 259us; 260us; 261us; 262us; 263us; 268us; 269us; 270us; 271us; 272us; 273us; 290us; 306us; 307us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 2us; 1us; 0us; 3us; 1us; 2us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 16413us; 65535us; 16414us; 65535us; 16415us; 65535us; 16416us; 65535us; 16417us; 65535us; 16418us; 65535us; 16419us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 16426us; 16427us; 65535us; 65535us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 16439us; 16440us; 16441us; 16442us; 16443us; 65535us; 65535us; 16445us; 16447us; |]
let _fsyacc_reductions ()  =    [| 
# 315 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SVMAST.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 324 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                          _1 
                   )
# 48 "Parser.fsy"
                 : SVMAST.Program));
# 335 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                             
                   )
# 51 "Parser.fsy"
                 : 'newlineSeq));
# 346 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                  
                   )
# 52 "Parser.fsy"
                 : 'newlineSeq));
# 356 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlineOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instructionSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                          _2 
                   )
# 54 "Parser.fsy"
                 : 'program));
# 368 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                              Reg1,_1 
                   )
# 57 "Parser.fsy"
                 : 'register));
# 379 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                              Reg2,_1 
                   )
# 58 "Parser.fsy"
                 : 'register));
# 390 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                              Reg3,_1 
                   )
# 59 "Parser.fsy"
                 : 'register));
# 401 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                              Reg4,_1 
                   )
# 60 "Parser.fsy"
                 : 'register));
# 412 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                             Integer (fst _1,snd _1) 
                   )
# 63 "Parser.fsy"
                 : 'literal));
# 423 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                              Float (fst _1,snd _1) 
                   )
# 64 "Parser.fsy"
                 : 'literal));
# 434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                Literal.String (fst _1,snd _1) 
                   )
# 65 "Parser.fsy"
                 : 'literal));
# 445 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                  makeReg _1 
                   )
# 66 "Parser.fsy"
                 : 'literal));
# 456 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'address)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                 _1 
                   )
# 67 "Parser.fsy"
                 : 'literal));
# 467 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                   Address(Integer(fst _2,snd _2)) 
                   )
# 70 "Parser.fsy"
                 : 'address));
# 478 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                        Address(makeReg _2) 
                   )
# 71 "Parser.fsy"
                 : 'address));
# 489 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'address)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                 _1 
                   )
# 74 "Parser.fsy"
                 : 'adressOrReg));
# 500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                  makeReg _1 
                   )
# 75 "Parser.fsy"
                 : 'adressOrReg));
# 511 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                             _1,"AND" 
                   )
# 78 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 522 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                            _1,"OR" 
                   )
# 79 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 533 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                             _1,"MOD" 
                   )
# 80 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 544 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                             _1,"ADD" 
                   )
# 81 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 555 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                             _1,"SUB" 
                   )
# 82 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 566 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                             _1,"MUL" 
                   )
# 83 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 577 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                             _1,"DIV" 
                   )
# 84 "Parser.fsy"
                 : 'anyBinaryOpErr));
# 588 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anyBinaryOpErr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                        _1 
                   )
# 87 "Parser.fsy"
                 : 'anyOpErr));
# 599 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                             _1,"NOT" 
                   )
# 88 "Parser.fsy"
                 : 'anyOpErr));
# 610 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                             Nop _1 
                   )
# 91 "Parser.fsy"
                 : 'instruction));
# 621 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'adressOrReg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                 Mov(_2,_3,_1) 
                   )
# 92 "Parser.fsy"
                 : 'instruction));
# 634 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                              And(fst _2,_3,_1) 
                   )
# 93 "Parser.fsy"
                 : 'instruction));
# 647 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                             Or(fst _2,_3,_1) 
                   )
# 94 "Parser.fsy"
                 : 'instruction));
# 660 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                      Not(fst _2,_1) 
                   )
# 95 "Parser.fsy"
                 : 'instruction));
# 672 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                              Mod(fst _2,_3,_1) 
                   )
# 96 "Parser.fsy"
                 : 'instruction));
# 685 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                              Add(fst _2,_3,_1) 
                   )
# 97 "Parser.fsy"
                 : 'instruction));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                              Sub(fst _2,_3,_1) 
                   )
# 98 "Parser.fsy"
                 : 'instruction));
# 711 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                              Mul(fst _2,_3,_1) 
                   )
# 99 "Parser.fsy"
                 : 'instruction));
# 724 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                              Div(fst _2,_3,_1) 
                   )
# 100 "Parser.fsy"
                 : 'instruction));
# 737 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                              Cmp(fst _2,_3,_1) 
                   )
# 101 "Parser.fsy"
                 : 'instruction));
# 750 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                Jmp(fst _2,_1) 
                   )
# 102 "Parser.fsy"
                 : 'instruction));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                        Jc(fst _2,fst _3,_1) 
                   )
# 103 "Parser.fsy"
                 : 'instruction));
# 775 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                         Jeq(fst _2,fst _3,_1) 
                   )
# 104 "Parser.fsy"
                 : 'instruction));
# 788 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                     Label(fst _2,snd _2) 
                   )
# 105 "Parser.fsy"
                 : 'instruction));
# 799 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                           errAtPos "The first argument of MOV should be an address or register" _1 
                   )
# 108 "Parser.fsy"
                 : 'instruction));
# 811 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'adressOrReg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                               errAtPos "Invalid second argument format for MOV" _1 
                   )
# 109 "Parser.fsy"
                 : 'instruction));
# 823 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anyBinaryOpErr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                      errAtPos (sprintf "The first argument of %s should be a register" (snd _1)) (rhs parseState 2) 
                   )
# 110 "Parser.fsy"
                 : 'instruction));
# 835 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                            errAtPos "The second argument of AND should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 111 "Parser.fsy"
                 : 'instruction));
# 847 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                           errAtPos "The second argument of OR should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 112 "Parser.fsy"
                 : 'instruction));
# 859 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                   errAtPos "The  argument of NOT should be a constant, an address, or a register" (rhs parseState 2) 
                   )
# 113 "Parser.fsy"
                 : 'instruction));
# 870 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                            errAtPos "The second argument of MOD should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 114 "Parser.fsy"
                 : 'instruction));
# 882 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                            errAtPos "The second argument of ADD should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 115 "Parser.fsy"
                 : 'instruction));
# 894 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                            errAtPos "The second argument of SUB should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 116 "Parser.fsy"
                 : 'instruction));
# 906 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                            errAtPos "The second argument of MUL should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 117 "Parser.fsy"
                 : 'instruction));
# 918 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                            errAtPos "The second argument of DIV should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 118 "Parser.fsy"
                 : 'instruction));
# 930 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                            errAtPos "The second argument of CMP should be a constant, an address, or a register" (rhs parseState 3) 
                   )
# 119 "Parser.fsy"
                 : 'instruction));
# 942 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                   errAtPos "The argument of JMP should be a label" (rhs parseState 2) 
                   )
# 120 "Parser.fsy"
                 : 'instruction));
# 953 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'register)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                           errAtPos "The first argument of JC should be a label" (rhs parseState 2) 
                   )
# 121 "Parser.fsy"
                 : 'instruction));
# 965 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                     errAtPos "The second argument of JC should be a register " (rhs parseState 3) 
                   )
# 122 "Parser.fsy"
                 : 'instruction));
# 977 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                      errAtPos "The second argument of JEQ should be a register " (rhs parseState 3) 
                   )
# 123 "Parser.fsy"
                 : 'instruction));
# 989 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                        errAtPos "The argument of a label definition should be an identifier " (rhs parseState 2)  
                   )
# 124 "Parser.fsy"
                 : 'instruction));
# 999 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                     
                   )
# 127 "Parser.fsy"
                 : 'newlineOpt));
# 1010 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                          
                   )
# 128 "Parser.fsy"
                 : 'newlineOpt));
# 1020 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instruction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlineSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'instructionSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 131 "Parser.fsy"
                 : 'instructionSeq));
# 1033 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instruction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                     [_1] 
                   )
# 132 "Parser.fsy"
                 : 'instructionSeq));
# 1044 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instruction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instructionSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                    errAtPos "Instructions should be written one per line" (rhs parseState 2) 
                   )
# 133 "Parser.fsy"
                 : 'instructionSeq));
# 1056 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                          [] 
                   )
# 134 "Parser.fsy"
                 : 'instructionSeq));
|]
# 1067 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 32;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : SVMAST.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
